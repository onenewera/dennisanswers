@import url('https://fonts.googleapis.com/css?family=Lato');

// Colors Variables
$teal: #2291a5;
$primary-font: #454545;
$background-color: #eff1f0;

$font-family: 'Lato', sans-serif;
$light-font-weight: 100;
$medium-font-weight: 300;
$heavy-font-weight: 800;

// ----
// Sass (v3.4.4)
// Compass (v1.0.1)
// ----

body {
  background-color: $background-color;
  position: relative;
  width: 100vw;
  height: 100vh;
  text-align: center;
  overflow: hidden;
}

.show {
  opacity: 1;
}

$browser-context: 16; // Default

@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}

h1 {
  font-size: em(42);
  color: $teal;
  text-transform: uppercase;
  letter-spacing: .2em;
  font-family: $font-family;
  font-weight: $light-font-weight;
  position: absolute;
  top: 45%;
  opacity: 1;
  transition: all 4s ease;
  animation: text 3s ease-in-out infinite;
}

svg {
  width: 90vw;
  position: absolute;
  bottom: -42%;
}

#LeftEar {
  animation: float 3s ease-in-out infinite;
}

#RightEar {
  animation: float 3s ease-in-out infinite;
}

.head {
  animation: float 3s ease-in-out infinite;
  animation: rotate 4s ease-in-out infinite;
}

.neck-shadow {
  animation: float 2.5s ease-in-out infinite;
}

.left-sideburns {
  animation: float 3.4s ease-in-out infinite;
}

.right-sideburns {
  animation: float 3.6s ease-in-out infinite;
}

.left-eye {
  animation: left-eye 3s ease-in-out infinite;
}

.right-eye {
  animation: right-eye 3s ease-in-out infinite;
}

@keyframes text {
	0% {
		transform: translateY(0px);
    // transform: translateX(0px);
	}
	50% {
		transform: translateY(-5px);
    // transform: translateX(5px);
	}
	100% {
		transform: translatey(0px);
    // transform: translateX(5px);
	}
}

@keyframes float {
	0% {
		transform: translatey(0px);
	}
	50% {
		transform: translatey(-2px);
	}
	100% {
		transform: translatey(0px);
	}
}

@keyframes rotate {
	0% {
		transform: translatex(0px);
	}
	50% {
		transform: translatex(-2px);
	}
	100% {
		transform: translatex(0px);
	}
}

@keyframes left-eye {
	0% {
		transform: translatex(0px);
    transform: translatey(0px);
	}
	40% {
		transform: translatex(-4px);
    transform: translatey(1px);
	}
  50% {
		transform: translatex(0px);
    transform: translatey(0px);
	}
	100% {
		transform: translatex(0px);
    transform: translatey(0px);
	}
}

@keyframes right-eye {
	0% {
		transform: translatex(0px);
	}
	40% {
		transform: translatex(-2px);
	}
  50% {
		transform: translatex(0px);
	}
	100% {
		transform: translatex(0px);
	}
}

// Functions
$settings: (
    maxWidth: 800px,
    columns: 12,
    margin: 15px,
    breakpoints: (
        xs: "(max-width : 480px)",
        sm: "(max-width : 768px) and (min-width: 481px)",
        md: "(max-width : 1024px)  and (min-width: 769px)",
        lg: "(min-width : 1025px)"
    )
);

@mixin renderGridStyles($settings){
  .container {
    padding-right: map-get($settings, "margin");
    padding-left: map-get($settings, "margin");
    margin-right: auto;
    margin-left: auto;
    max-width: map-get($settings,"maxWidth");
  }

  .row {
    margin-right: map-get($settings, "margin") * -1;
    margin-left: map-get($settings, "margin") * -1;
  }
  $breakpoints: map-get($settings, "breakpoints");
  @each $key, $breakpoint in $breakpoints {
    @include media($breakpoint) {
      @include renderGrid($key, $settings);
    }
  }
}

@mixin renderGrid($key, $settings) {
  $i: 1;
  @while $i <= map-get($settings, "columns") {
    .col-#{$key}-#{$i} {
      float: left;
      width: 100% * $i / map-get($settings,"columns");
    }
    $i: $i+1;
  }
}

@mixin media($queryString){
    @media #{$queryString} {
      @content;
    }
}

@include renderGridStyles($settings);

p {
  padding: 20px;
  color: white;
  background: #9b59b6;
  margin: 20px;
}
